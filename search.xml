<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo多端同步方法</title>
      <link href="/hexoblog/2021/05/21/hexo-duo-duan-tong-bu-fang-fa/"/>
      <url>/hexoblog/2021/05/21/hexo-duo-duan-tong-bu-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经常我们有一个场景：需要在公司或者家庭多个电脑完成Hexo的博客撰写和发布工作。这就涉及到Hexo多电脑的同步问题。</p><h3 id="过时方案"><a href="#过时方案" class="headerlink" title="过时方案"></a>过时方案</h3><p>网上的方案基本上都是多分支方案。也即，在同一个仓库创建两个分支：</p><p> 1.Hexo分支 – 用来保存所有Hexo的源文件<br> 2.master分支 – 用来保存Hexo生成的博客文件</p><p>在创建GitHub Pages或者Coding Pages时，以master分支为pages分支。<br>Hexo的deploy指向master分支部署pages，git的管理指向Hexo分支。</p><p>但是这里有一个巨大的问题，就是多分支的方案一定是让完整的Hexo源文件暴露在公开的仓库了。这对一些Hexo博客采用的leancloud阅读次数管理、多说评论等服务的私有secret key也暴露在公开仓库分支了。如果对这些配置的_config.yml进行单独管理的话，又不能在另一台电脑直接git pull同步，非常的麻烦。</p><h3 id="最佳办法"><a href="#最佳办法" class="headerlink" title="最佳办法"></a>最佳办法</h3><p>所以Hexo最完美的多电脑同步方法是，创建两个仓库：</p><p> 1。Hexo私有仓库 – 用来保存所有Hexo的源文件<br> 2.master公开仓库 – 用来保存Hexo生成的博客文件</p><p>下面来具体讲讲实现方法。</p><h3 id="基础假设"><a href="#基础假设" class="headerlink" title="基础假设"></a>基础假设</h3><p>这里假设读者已经建立起了Hexo的博客系统了，实现了比方说：</p><p>1.利用hexo d 直接deploy Hexo博客<br>2.实现了Hexo的GitHub和Coding国外和国内的同时发布<br>3.自行定义了例如next的第三方主题</p><p>Let’go!</p><h2 id="1-创建私有仓库"><a href="#1-创建私有仓库" class="headerlink" title="1.创建私有仓库"></a>1.创建私有仓库</h2><p>注册一个github账号，然后创建一个私有项目，名称为 <code>myHexo</code></p><h2 id="2-删除第三方git配置"><a href="#2-删除第三方git配置" class="headerlink" title="2.删除第三方git配置"></a>2.删除第三方git配置</h2><p>进入你现有的Hexo文件夹，删除第三方主题的git配置，如对next主题</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rm -rf .&#x2F;themes&#x2F;next&#x2F;.git&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-建立本地的git仓库"><a href="#3-建立本地的git仓库" class="headerlink" title="3.建立本地的git仓库"></a>3.建立本地的git仓库</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-创建-gitignore文件"><a href="#4-创建-gitignore文件" class="headerlink" title="4.创建.gitignore文件"></a>4.创建.gitignore文件</h2><p>在Hexo的根目录创建一个.gitignore文件，内容为：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">.DS_StoreThumbs.dbdb.json*.lognode_modules&#x2F;public&#x2F;.deploy*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-push到私有仓库"><a href="#5-push到私有仓库" class="headerlink" title="5.push到私有仓库"></a>5.push到私有仓库</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git remote add origin git@github.com:&lt;Github账号名称&gt;&#x2F;myHexo.github.gitgit add .git commit -m &quot;my first private hexo&quot;git push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>至此，就完成了本地Hexo源码的全备份.</p><h2 id="在另一台电脑进行Hexo写作"><a href="#在另一台电脑进行Hexo写作" class="headerlink" title="在另一台电脑进行Hexo写作"></a>在另一台电脑进行Hexo写作</h2><p>上面已经完成了Hexo的全备份，那么如果在另一台电脑进行Hexo编辑呢。<br>当然首先你也要完成node/npm/hexo/git等环境的搭建和配置。</p><h3 id="1-Hexo拉取"><a href="#1-Hexo拉取" class="headerlink" title="1.Hexo拉取"></a>1.Hexo拉取</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git clone git@github.com:&lt;Github账号名称&gt;&#x2F;myHexo.github.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样你就拥有了你的所有Hexo源文件</p><h3 id="2-Hexo编写和发布"><a href="#2-Hexo编写和发布" class="headerlink" title="2.Hexo编写和发布"></a>2.Hexo编写和发布</h3><p>尽管拉取下来了，还需要建立一下Hexo的环境，这里需要格外注意的一点是：<br>千万不要用<code>hexo init</code>命令。原因是当前目录已经建立了git仓库环境, <code>hexo init</code>会覆盖到当前的git环境，重建一个新的，这样和我们的私有Hexo源码仓库脱离了联系。</p><p>正确的做法是：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为package.json里面已经保存了hexo的必备资源包信息，npm install后Hexo环境就建立起来了。</p><p>接下来就进行正常的编写和发布就好。<br>本地预览的命令还是：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Hexo的发布命令是</p><pre class="line-numbers language-none"><code class="language-none">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-完成Hexo源码仓库的同步"><a href="#3-完成Hexo源码仓库的同步" class="headerlink" title="3.完成Hexo源码仓库的同步"></a>3.完成Hexo源码仓库的同步</h3><p>最后执行<code>git status</code>把更改的新文件<code>git add</code>和<code>git commit</code>，最后<code>git push</code>到私有仓库，又会完成Hexo源码仓库的同步。</p><h2 id="Hexo仓库更新"><a href="#Hexo仓库更新" class="headerlink" title="Hexo仓库更新"></a>Hexo仓库更新</h2><p>下次进行Hexo仓库拉取时执行：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git fetch --all #将git上所有文件拉取到本地git reset --hard origin&#x2F;master  #强制将本地内容指向刚刚同步git云端内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>reset 对所拉取的文件不做任何处理，此处不用 pull 是因为本地尚有许多文件，使用 pull 会有一些版本冲突，解决起来也麻烦，而本地的文件都是初始化生成的文件，较拉取的库里面的文件而言基本无用，所以直接丢弃。</p><p>END<br>从此，世界是如此的美好。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hexoblog/2021/05/21/hello-world/"/>
      <url>/hexoblog/2021/05/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ hexo new &quot;My New Post&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用EHForwarderBot实现Telegram同时收发多个微信 QQ消息</title>
      <link href="/hexoblog/2019/07/05/ehforwarderbot-shou-fa-xiao-xi/"/>
      <url>/hexoblog/2019/07/05/ehforwarderbot-shou-fa-xiao-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><p><code>EH Forwarder Bot</code>是一个可扩展的聊天隧道框架，允许用户一次发送和接收来自多个<code>IM</code>平台的消息，并最终远程管理他们的帐户，目前可以实现的<code>Telegram</code>收发<code>QQ</code>、微信、<code>Facebook Messenger</code>等消息，你也可以同时一起收发<code>N</code>个微信、<code>N</code>个<code>QQ</code>等，这里就说下<code>Telegram</code>收发微信/<code>QQ</code>消息的手动安装及<code>Docker</code>安装。</p><h3 id="收发微信"><a href="#收发微信" class="headerlink" title="收发微信"></a>收发微信</h3><p><strong>项目地址：</strong><a href="https://github.com/blueset/ehForwarderBot">https://github.com/blueset/ehForwarderBot</a></p><p>所使用的模块地址：</p><pre class="line-numbers language-none"><code class="language-none">#Telegram模块https:&#x2F;&#x2F;github.com&#x2F;blueset&#x2F;efb-telegram-master#微信模块https:&#x2F;&#x2F;github.com&#x2F;blueset&#x2F;efb-wechat-slave<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其他模块地址→<a href="https://github.com/blueset/ehForwarderBot/wiki/Channels-Repository">传送门</a>，包括<code>Facebook Messenger</code>等模块，有兴趣的可以看下。</p><p><strong>环境要求：</strong><code>Python 3.6+</code>、<code>EH Forwarder Bot 2.0+</code>、<code>ffmpeg</code>、<code>libmagic</code>、<code>libwebp</code></p><p>手动教程适用于<code>Debian</code>、<code>CentOS</code>、<code>Ubuntu</code>，如果你想用<code>Ubuntu</code>的话，最好使用<code>18.04+</code>版本。</p><h4 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h4><pre class="line-numbers language-none"><code class="language-none">#CentOS系统yum install file-devel libwebp-tools git screen -y#Debian&#x2F;Ubuntu系统apt install libwebp-dev libmagic-dev git screen -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、安装Python3-6"><a href="#2、安装Python3-6" class="headerlink" title="2、安装Python3.6"></a>2、安装Python3.6</h4><pre class="line-numbers language-none"><code class="language-none">#CentOS系统wget https:&#x2F;&#x2F;www.moerats.com&#x2F;usr&#x2F;shell&#x2F;Python3&#x2F;CentOS_Python3.6.sh &amp;&amp; sh CentOS_Python3.6.sh#Debian系统wget https:&#x2F;&#x2F;www.moerats.com&#x2F;usr&#x2F;shell&#x2F;Python3&#x2F;Debian_Python3.6.sh &amp;&amp; sh Debian_Python3.6.sh#Ubuntu系统apt updateapt install python3-pip python3-setuptools python3-dev -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、安装ffmpeg"><a href="#3、安装ffmpeg" class="headerlink" title="3、安装ffmpeg"></a>3、安装ffmpeg</h4><pre class="line-numbers language-none"><code class="language-none">#下载ffmpeg二进制wget https:&#x2F;&#x2F;www.moerats.com&#x2F;usr&#x2F;down&#x2F;ffmpeg&#x2F;ffmpeg-git-$(getconf LONG_BIT)bit-static.tar.xz#解压文件tar xvf ffmpeg-git-*-static.tar.xz#移动ffmpeg可执行文件mv ffmpeg-git-*&#x2F;ffmpeg  ffmpeg-git-*&#x2F;ffprobe &#x2F;usr&#x2F;bin&#x2F;#删除文件rm -rf ffmpeg-git-*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、安装框架"><a href="#4、安装框架" class="headerlink" title="4、安装框架"></a>4、安装框架</h4><pre class="line-numbers language-none"><code class="language-none">#安装稳定版pip3 install ehforwarderbot#安装开发版，建议安装开发版，bug修复快些，功能也新pip3 install git+https:&#x2F;&#x2F;github.com&#x2F;blueset&#x2F;ehforwarderbot.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、安装TG和微信模块"><a href="#5、安装TG和微信模块" class="headerlink" title="5、安装TG和微信模块"></a>5、安装TG和微信模块</h4><pre class="line-numbers language-none"><code class="language-none">pip3 install efb-telegram-master efb-wechat-slave<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6、启用模块"><a href="#6、启用模块" class="headerlink" title="6、启用模块"></a>6、启用模块</h4><p>先新建配置文件夹和配置文件<code>config.yaml</code>，使用命令：</p><pre class="line-numbers language-none"><code class="language-none">#default为配置文件默认的文件夹，你也可以命名为其它的，不会玩的就默认mkdir -p ~&#x2F;.ehforwarderbot&#x2F;profiles&#x2F;defaultnano ~&#x2F;.ehforwarderbot&#x2F;profiles&#x2F;default&#x2F;config.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参考代码为：</p><pre class="line-numbers language-none"><code class="language-none">#请根据实际情况修改master_channel: foo.demo_masterslave_channels:- foo.demo_slave- bar.dummymiddlewares:- foo.null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上对应的均为模块名称，模块参考→<a href="https://github.com/blueset/ehForwarderBot/wiki/Channels-Repository">传送门</a>，比如这里博主只用了<code>Telegram</code>和<code>WeChat</code>模块，所以大致配置为：</p><pre class="line-numbers language-none"><code class="language-none">master_channel: blueset.telegramslave_channels:- blueset.wechat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后使用<code>Ctrl+x</code>、<code>y</code>保存退出。</p><p>这只是登录一个微信号，如果你要同时登录多个微信号，那么配置文件就需要改为：</p><pre class="line-numbers language-none"><code class="language-none">#比如我要同时登录并收发3个微信号master_channel: blueset.telegramslave_channels:- blueset.wechat- blueset.wechat#moe123- blueset.wechat#rats321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只需要在后面使用<code>#</code>指定一个<code>ID</code>号，该<code>ID</code>号只能有字母，数字和下划线，即正则表达式<code>[a-zA-Z0-9_]+</code>，想登录几个账户就加几个。如果你使用<code>QQ</code>、<code>Facebook Messenger</code>模块的话，设置方法也一样。</p><h4 id="7、建立TG配置文件"><a href="#7、建立TG配置文件" class="headerlink" title="7、建立TG配置文件"></a>7、建立TG配置文件</h4><p>建立配置文件前需要先获取<code>Telegram</code>的<code>Token</code>和<code>Userid</code>，获取方法如下：</p><pre class="line-numbers language-none"><code class="language-none">#Telegram的Token获取1、在Telegram关注@BotFather2、再到对话框依次输入：&#x2F;start&#x3D;&gt;&#x2F;newbot，然后会要你给机器人命名(如：MoeratsBot)，命名完成会给你一个Token。#Telegram群Userid获取1、先和你的机器人聊天，随便发一句话。2、在浏览器输入https:&#x2F;&#x2F;api.telegram.org&#x2F;botxx:xx&#x2F;getUpdates(其中xx:xx为Token)，然后chat后面的id即为你的userid。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再新建一个<code>Telegram</code>模块配置文件夹和配置文件<code>config.yaml</code>，使用命令：</p><pre class="line-numbers language-none"><code class="language-none">#同样的也建在default文件夹，如果你上面更改了default文件夹，那这里也要更改mkdir ~&#x2F;.ehforwarderbot&#x2F;profiles&#x2F;default&#x2F;blueset.telegramnano ~&#x2F;.ehforwarderbot&#x2F;profiles&#x2F;default&#x2F;blueset.telegram&#x2F;config.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>填入以下代码：</p><pre class="line-numbers language-none"><code class="language-none">token: &quot;12345:moerats&quot; admins:- 765432 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后使用<code>Ctrl+x</code>、<code>y</code>保存退出。上面所对应的参数分别为<code>Token</code>和<code>Userid</code>。关于<code>Telegram</code>模块的更多玩法可以参考→<a href="https://github.com/blueset/efb-telegram-master">传送门</a>。</p><h4 id="8、启动"><a href="#8、启动" class="headerlink" title="8、启动"></a>8、启动</h4><pre class="line-numbers language-none"><code class="language-none">#该命令会默认从default文件夹读取信息，如果你之前建的是moerats文件夹，那命令应该为ehforwarderbot -p moeratsehforwarderbot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时候会给一个微信二维码或者二维码链接你，放到浏览器打开扫描登录即可，如果你设置了同时登录多个账户，那设置几个就需要登录几个。</p><p>然后使用<code>Ctrl+C</code>断开运行，再使用命令后台运行：</p><pre class="line-numbers language-none"><code class="language-none">screen -dmS EHF ehforwarderbot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后你的微信消息会通过机器人发送给你，你也可以通过机器人将消息发送给指定好友。</p><h3 id="收发QQ消息"><a href="#收发QQ消息" class="headerlink" title="收发QQ消息"></a>收发QQ消息</h3><pre class="line-numbers language-none"><code class="language-none">提示：这里随便提了下，了解下就行了，建议使用下面Docker方式安装。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所使用的模块地址：</p><pre class="line-numbers language-none"><code class="language-none">#Telegram模块https:&#x2F;&#x2F;github.com&#x2F;blueset&#x2F;efb-telegram-master#QQ模块https:&#x2F;&#x2F;github.com&#x2F;milkice233&#x2F;efb-qq-slave<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于方法写的很大概，所以需要你把收发微信的方法看懂，这里<code>EH Forwarder Bot</code>只支持<code>酷Q</code>客户端，一般采用<code>Docker</code>的方法在<code>Linux</code>上安装酷<code>Q</code>，方法很久以前就说过了，参考→<a href="https://www.moerats.com/archives/802/">传送门</a>，不过启动命令变了下，也就是安装<code>wine-coolq</code>的命令。</p><h4 id="安装TG和QQ模块："><a href="#安装TG和QQ模块：" class="headerlink" title="安装TG和QQ模块："></a>安装<code>TG</code>和<code>QQ</code>模块：</h4><pre class="line-numbers language-none"><code class="language-none">pip3 install efb-telegram-master efb-qq-slave<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装wine-coolq："><a href="#安装wine-coolq：" class="headerlink" title="安装wine-coolq："></a>安装<code>wine-coolq</code>：</h4><pre class="line-numbers language-none"><code class="language-none">mkdir coolq  #包含CoolQ程序文件docker run -ti --rm --name cqhttp-test --net&#x3D;&quot;host&quot; \     -v $(pwd)&#x2F;coolq:&#x2F;home&#x2F;user&#x2F;coolq     &#96;#mount coolq folder&#96; \     -p 9000:9000                         &#96;#网页noVNC端口&#96; \     -p 5700:5700                         &#96;#酷Q对外提供的API接口的端口&#96; \     -e VNC_PASSWD&#x3D;MAX8char               &#96;#请修改VNC密码！！！！&#96; \     -e COOLQ_PORT&#x3D;5700                   &#96;#酷Q对外提供的API接口的端口&#96; \     -e COOLQ_ACCOUNT&#x3D;123456              &#96;#在此输入要登录的QQ号，虽然可选但是建议填入&#96; \     -e CQHTTP_POST_URL&#x3D;http:&#x2F;&#x2F;127.0.0.1:8000   &#96;#efb-qq-slave监听的端口&#x2F;地址用于接受传入的消息&#96; \     -e CQHTTP_SERVE_DATA_FILES&#x3D;yes       &#96;#允许以HTTP方式访问酷Q数据文件&#96; \     -e CQHTTP_ACCESS_TOKEN&#x3D;ac0f790e1fb74ebcaf45da77a6f9de47  &#96;#Access Token&#96; \     -e CQHTTP_POST_MESSAGE_FORMAT&#x3D;array  &#96;# 回传消息时使用数组(必选)&#96; \     richardchien&#x2F;cqhttp:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用<code>ip:9000</code>访问<code>noVNC</code>登录<code>酷Q</code>即可。</p><h4 id="新建QQ模块配置文件："><a href="#新建QQ模块配置文件：" class="headerlink" title="新建QQ模块配置文件："></a>新建<code>QQ</code>模块配置文件：</h4><pre class="line-numbers language-none"><code class="language-none">mkdir ~&#x2F;.ehforwarderbot&#x2F;profiles&#x2F;default&#x2F;milkice.qqnano ~&#x2F;.ehforwarderbot&#x2F;profiles&#x2F;default&#x2F;milkice.qq&#x2F;config.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>填入的代码大致如下:</p><pre class="line-numbers language-none"><code class="language-none">Client: CoolQ                         #指定要使用的QQ客户端（此处为CoolQ）CoolQ:    type: HTTP                        #指定efb-qq-slave与酷Q通信的方式 现阶段仅支持HTTP    access_token: ac0f790e1fb74ebcaf45da77a6f9de47    api_root: http:&#x2F;&#x2F;127.0.0.1:5700&#x2F;  # 酷Q API接口地址&#x2F;端口    host: 127.0.0.1                   # efb-qq-slave所监听的地址用于接收消息    port: 8000                        # 同上    is_pro: false                      # 若为酷Q Pro则为true，反之为false    air_option:                       # 包含于air_option的配置选项仅当is_pro为false时才有效        upload_to_smms: true          # 将来自EFB主端(通常是Telegram) 的图片上传到sm.ms服务器并以链接的形式发送到QQ端<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后使用<code>ehforwarderbot</code>命令启动即可。</p><h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><p>这里选择<code>2</code>个最新的<code>Docker</code>镜像，也是官方推荐的，项目地址：</p><pre class="line-numbers language-none"><code class="language-none">#Telegram收发QQ消息https:&#x2F;&#x2F;github.com&#x2F;Earth-Online&#x2F;efb-qq-coolq-docker#Telegram收发微信消息https:&#x2F;&#x2F;www.github.com&#x2F;Mikubill&#x2F;efb-wechat-docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1、安装Docker"><a href="#1、安装Docker" class="headerlink" title="1、安装Docker"></a>1、安装Docker</h4><pre class="line-numbers language-none"><code class="language-none">#CentOS 6rpm -iUvh http:&#x2F;&#x2F;dl.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;6&#x2F;x86_64&#x2F;epel-release-6-8.noarch.rpmyum update -yyum -y install docker-ioservice docker startchkconfig docker on#CentOS 7、Debian、Ubuntucurl -sSL https:&#x2F;&#x2F;get.docker.com&#x2F; | shsystemctl start dockersystemctl enable docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、Telegram收发QQ消息"><a href="#2、Telegram收发QQ消息" class="headerlink" title="2、Telegram收发QQ消息"></a>2、Telegram收发QQ消息</h4><p>安装<code>docker-compose</code>：</p><pre class="line-numbers language-none"><code class="language-none">curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.23.2&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-composechmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose#验证是否安装成功docker-compose --version#返回以下信息即安装成功docker-compose version 1.23.2, build 1110ad01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拉取<code>Docker</code>源码：</p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;Earth-Online&#x2F;efb-qq-coolq-docker.gitcd efb-qq-coolq-docker#编辑config.yaml配置文件nano ehforward_config&#x2F;profiles&#x2F;default&#x2F;blueset.telegram&#x2F;config.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改如下：</p><pre class="line-numbers language-none"><code class="language-none">#token和userid参数获取方法查看上面的手动安装教程token: &quot;你的TG机器人Token&quot;admins:- 你的Userid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后再编辑<code>docker-compose.yml</code>文件：</p><pre class="line-numbers language-none"><code class="language-none">nano docker-compose.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改如下：</p><pre class="line-numbers language-none"><code class="language-none">- VNC_PASSWD&#x3D;你的密码- COOLQ_ACCOUNT&#x3D;你的qq账号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>后台启动：</p><pre class="line-numbers language-none"><code class="language-none">#第一次启动会构建镜像，所以会慢点docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后打开<code>ip:9801</code>登陆<code>novnc</code>后完成<code>coolq</code>登陆操作。如果该地址打不开，请检查下防火墙。</p><h4 id="3、Telegram收发微信消息"><a href="#3、Telegram收发微信消息" class="headerlink" title="3、Telegram收发微信消息"></a>3、Telegram收发微信消息</h4><pre class="line-numbers language-none"><code class="language-none">#拉取源码git clone https:&#x2F;&#x2F;github.com&#x2F;mikubill&#x2F;efb-wechat-docker.git#构建镜像cd efb-wechat-docker &amp;&amp; docker build -t mikubill&#x2F;efbwechat .#启动镜像，TOKEN为TG机器人Token、ADMIN为你的Userid，获取方法查看上面的手动安装教程docker run -d -t --name &quot;efbwechat&quot; -e TOKEN&#x3D;xxxx -e ADMIN&#x3D;xxxx mikubill&#x2F;efbwechat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后获取微信登录验证码，使用命令：</p><pre class="line-numbers language-none"><code class="language-none">docker logs -f efbwechat <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>扫描登录即可。</p><p>最后这里都没有给微信添加额外的配置文件，直接使用默认的微信配置，如果想扩展微信功能的可以参考→<a href="https://github.com/blueset/efb-wechat-slave#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BE%8B">传送门</a>，不过由于模块使用的微信网页版，所以支持的功能是有限的，比如：没有朋友圈、不能发语音、位置等等，一般来说也够用了，至于<code>QQ</code>的话，功能肯定受<code>酷Q</code>限制，暂时不能处理好友请求处理，加群请求处理，语音发送/接收等，对于<code>Facebook Messenger</code>模块的话，有需求的可以自己试试安装配置。</p><blockquote><p>本文转载自<a href="https://www.moerats.com/archives/931/">Rat’s Blog</a>。</p><p>感谢原作者，以及开源世界。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> QQ </tag>
            
            <tag> Telegram </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
